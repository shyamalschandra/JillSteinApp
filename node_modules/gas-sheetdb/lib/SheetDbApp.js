/**
 * WIL.Spreadsheet.sheetDb services.
 * Can be used to access '.wilconfig' sheet.
 * @fileoverview includes WIL.Spreadsheet.sheetDb services.
 */
var SpreadsheetApp = require('SpreadsheetApp');
var Table = require('./Table');
var config = require('./config');
var RowsList = require('./RowsList');

var TYPE_TABLE = 'Table',
    TYPE_PAGE = 'Page';

var SPREADSHEET_ID = 'spreadsheetId',
    TABLE_ID = 'tableId',
    SHEET_NAME = 'sheetName',
    SHEET_NO = 'sheetNo',
    TABLE_RANGE = 'tableRange',
    HEADER_ROWS = 'headerRows',
    HEADER_COLUMNS = 'headerColumns';


/**
 * @param {string} tableId listed in .wilconfig/Table/ section.
 * @param {string|{sheetName: (string|undefined), sheetNo: (number|undefined)}=} optSpreadsheetId
 * @param {{sheetName: (string|undefined), sheetNo: (number|undefined)}=} opt
 * @return {Object} created Table. if fail, returns null.
 */
function getTable(tableId, optSpreadsheetId, opt) {

  if (! tableId) {
    return null;
  }

  // if second argument is object, it is asumed to be 'option-object'
  // and second argument optSpreadsheetId is 省略された
  var option;
  if (typeof optSpreadsheetId === 'object') {
    option = optSpreadsheetId;
    optSpreadsheetId = '';
  } else {
    option = opt || {};
    optSpreadsheetId = optSpreadsheetId || '';
  }

  var settings = config.getSettings('Table', optSpreadsheetId);

  // No setting information about tableId.
  if (! settings[tableId]) {
    return null;
  }

  var spreadsheetId = settings[tableId][SPREADSHEET_ID] || optSpreadsheetId;

  // TABLE_ID points another table information.
  if (settings[tableId][TABLE_ID]) {
    if (settings[tableId][SHEET_NAME]) {
      option.sheetName = settings[tableId][SHEET_NAME];
    }
    return getTable(settings[tableId][TABLE_ID], spreadsheetId, option);
  }

  var spreadsheet;
  if (spreadsheetId === '') {
    spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  } else {
    spreadsheet = SpreadsheetApp.openById(spreadsheetId);
  }

  var sheetName = option.sheetName || settings[tableId][SHEET_NAME];
  var sheetNo = option.sheetNo || settings[tableId][SHEET_NO];

  if ((! sheetName) && (! sheetNo)) {
    return null;
  }

  if (! settings[tableId][TABLE_RANGE]) {
    return null;
  }

  var sheets, sheet, rangeStr, rangeInt = [];

  if (sheetName || (sheetName === '')) {
    sheet = spreadsheet.getSheetByName(sheetName);
  } else {
    sheets = spreadsheet.getSheets();
    sheet = sheets[sheetNo];
  }
  rangeStr = settings[tableId][TABLE_RANGE].split(',');
  rangeInt[0] = parseInt(rangeStr[0], 10);
  rangeInt[1] = parseInt(rangeStr[1], 10);
  rangeInt[2] = parseInt(rangeStr[2], 10);
  rangeInt[3] = parseInt(rangeStr[3], 10);

  if (isNaN(rangeInt[0]) || isNaN(rangeInt[1]) || isNaN(rangeInt[2]) || isNaN(rangeInt[3])) {
    return null;
  }

  var table;
  table = new Table(sheet, rangeInt[0], rangeInt[1], rangeInt[2], rangeInt[3]);

  if (settings[tableId][HEADER_ROWS]) {
    var headerRowsStr, headerRowsInt = [], hi;

    headerRowsStr = settings[tableId][HEADER_ROWS].split(',');

    for (hi = 0; hi < headerRowsStr.length; hi++) {
      headerRowsInt.push(parseInt(headerRowsStr[hi], 10));
    }
    table.createColumnHeader.apply(table, headerRowsInt);   // 'Multi Rows' Column's header.
  }

  return table;
}

if ((typeof module !== 'undefined') && module.exports) {
  module.exports = {
    getTable: getTable,
    RowsList: RowsList
  };
}
