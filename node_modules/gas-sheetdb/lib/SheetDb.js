/**
 * @fileoverview SheetDb Class
 * @module lib/SheetDb
 */

'use strict';

var assert = require('./assert');

/**
 * SheetDb class has wrapper methods for child 'class' to inherit parent 'object'.
 * - SheetDb instans should be prototype of child class.
 * - Wrapper methods access parent object through 'this.parent_' property.
 * 
 * @constructor
 * @param {Object} Child
 */
function SheetDb(Child) {
  if (Child) {
    this.constructor = Child.prototype.constructor;
  }
}

SheetDb.prototype = {

  /**
   * @return {number}
   */
  getNumRows : function () {
    assert (this.parent_ && this.parent_.getNumRows, 'SheetDb.getNumRows: Interface not implemented.');
    return this.parent_.getNumRows();
  },

  /**
   * @return {number}
   */
  getNumColumns : function () {
    assert (this.parent_ && this.parent_.getNumColumns, 'SheetDb.getNumColumns: Interface not implemented.');
    return this.parent_.getNumColumns();
  },

  /**
   * @param {string} index
   * @return {number}
   */
  getRow : function (index) {
    assert (this.parent_ && this.parent_.getRow, 'SheetDb.getRow: Interface not implemented.');
    return this.parent_.getRow(index);
  },

  /**
   * @param {string} index
   * @return {number}
   */
  getColumn : function (index) {
    assert (this.parent_ && this.parent_.getColumn, 'SheetDb.getColumn: Interface not implemented.');
    return this.parent_.getColumn(index);
  },

  /**
   * @param {(number|string)} row
   * @param {(number|string)} col
   * @return {(number|string|Object)}
   */
  getValue : function (row, col) {
    assert (this.parent_ && this.parent_.getValue, 'SheetDb.getValue: Interface not implemented.');
    return this.parent_.getValue(this.getRow(row), this.getColumn(col));
  },

  /**
   * @param {(number|string)} row
   * @param {(number|string)} col
   * @param {(number|string|Object)} val
   */
  setValue : function (row, col, val) {
    assert (this.parent_ && this.parent_.setValue, 'SheetDb.setValue: Interface not implemented.');
    return this.parent_.setValue(this.getRow(row), this.getColumn(col), val);
  },

  /**
   * @param {(number|string)} col
   * @param {function(a, b): number} orderfunc
   *        TODO: Where should I add '=' option for orderfunc ?
   */
  sort : function (col, orderfunc) {
    assert (this.parent_ && this.parent_.sort, 'SheetDb.sort: Interface not implemented.');
    return this.parent_.sort(orderfunc);
  },

  /**
   * @param {function(SheetDb, number): boolean} f return true to include, false to exclude.
   * @return {SheetDb}
   */
  select : function (f) {
    assert (this.parent_ && this.parent_.select, 'SheetDb.select: Interface not implemented.');
    return this.parent_.select(f);
  },

  /**
   * @param {function(SheetDb, number)} f
   */
  forEach : function (f) {
    var row, length = this.getNumRows();
    for (row = 1; row <= length; row++) {
      f(this, row);
    }
  },

  /**
   * @param {function(SheetDb, number): boolean} f return true to continue, false to break.
   */
  forEachWhile : function (f) {
    var row, length = this.getNumRows();
    for (row = 1; row <= length; row++) {
      if ( ! f(this, row)) {
        break;
      }
    }
  },

  /**
   * @param {number|string} colIndex
   * @param {function(SheetDb, number, number): boolean} f return true to count, false not to.
   *        TODO: Where should I add '=' option for f ?
   * @return {number}
   */
  count : function (colIndex, f) {
    var count, row,
        length = this.getNumRows(),
        col = this.getColumn(colIndex);

    f = f || function (sheetdb, row, col) {
      var val = sheetdb.getValue(row, col),
          isBlank = (val === '') || (val === undefined);
      return isBlank ? false : true;
    };

    for (count = 0, row = 1; row <= length; row++) {
      count += f(this, row, col) ? 1 : 0;
    }

    return count;
  },

  /**
   * @param {number|string} row
   * @param {number|string} col
   * @return {Range}              // TODO: Is this OK? Spreadsheet --> Sheet --> Range
   */
  getCell : function (row, col) {
    assert (this.parent_ && this.parent_.getCell, 'SheetDb.getCell: Interface not implemented.');
    return this.parent_.getCell(row, col);
  },

  /**
   *
   */
  flush : function () {
    assert (this.parent_ && this.parent_.flush, 'SheetDb.flush: Interface not implemented.');
    return this.parent_.flush();
  }
};


module.exports = SheetDb;
