/**
 * WIL.Spreadsheet.Table class</br>
 * provide methods to access range as a table with headers, index.
 * @fileoverview includes WIL.Spreadsheet.Table Class.
 * @module lib/Table
 */

'use strict';

var assert = require('./assert'),
    MultiLineHeader = require('./MultiLineHeader'),
    SheetDb = require('./SheetDb');

/**
 * Table class
 * @constructor
 * @extends
 * @param {Object} sheet
 * @param {number} topRow
 * @param {number} topCol
 * @param {number} endRow
 * @param {number} endCol
 */
function Table(sheet, topRow, topCol, endRow, endCol) {

  var sheetMaxRows = sheet.getMaxRows(),
      sheetMaxColumns = sheet.getMaxColumns();

  endRow = (typeof endRow !== 'undefined') ? endRow : -1;
  endCol = (typeof endCol !== 'undefined') ? endCol : -1;

  this.sheet_ = sheet;

  this.tRow_ = topRow > 0 ? topRow : (sheetMaxRows + 1) + topRow;
  this.tCol_ = topCol > 0 ? topCol : (sheetMaxColumns + 1) + topCol;
  this.eRow_ = endRow > 0 ? endRow : (sheetMaxRows + 1) + endRow;
  this.eCol_ = endCol > 0 ? endCol : (sheetMaxColumns + 1) + endCol;

  this.numRows_ = this.eRow_ - this.tRow_ + 1;
  this.numColumns_ = this.eCol_ - this.tCol_ + 1;

  assert((this.tRow_ > 0) && (this.tRow_ <= sheetMaxRows),
         'Table:Constructor: topRow - out of range.');

  assert(((this.tCol_ > 0) && (this.tCol_ <= sheetMaxColumns)),
         'Table:Constructor: topCol - out of range.');

  assert(((this.numRows_ > 0) && (this.eRow_ <= sheetMaxRows)),
         'Table:Constructor: endRow - out of range.');

  assert(((this.numColumns_ > 0) && (this.eCol_ <= sheetMaxColumns)),
         'Table:Constructor: endCol - out of range.');

  this.tableRange_ =
    this.sheet_.getRange(this.tRow_, this.tCol_, this.numRows_, this.numColumns_);

  this.tableValues_ = this.tableRange_.getValues();
}


Table.prototype = new SheetDb(Table);

/**
 * @return {number}
 */
Table.prototype.getNumRows = function() {
  return this.numRows_;
};

/**
 * @return {number}
 */
Table.prototype.getNumColumns = function() {
  return this.numColumns_;
};

/**
 * @param {number} row
 * @param {number} col
 * @return {number|string|Object}
 */
Table.prototype.getValue = function(row, col) {

  row = this.rowHeader ? this.rowHeader.getIndex(row) : row;
  col = this.columnHeader ? this.columnHeader.getIndex(col) : col;

  assert(((row > 0) && (row <= this.numRows_)), 'Table:getValue: row - invalid parameter.');
  assert(((col > 0) && (col <= this.numColumns_)), 'Table:getValue: col - invalid parameter.');

  return this.tableValues_[row - 1][col - 1];
};

/**
 * @param {number} row
 * @param {number} col
 * @param {number|string|Object} val
 */
Table.prototype.setValue = function(row, col, val) {

  row = this.rowHeader ? this.rowHeader.getIndex(row) : row;
  col = this.columnHeader ? this.columnHeader.getIndex(col) : col;

  assert(((row > 0) && (row <= this.numRows_)), 'Table:setValue: row - invalid parameter.');
  assert(((col > 0) && (col <= this.numColumns_)), 'Table:setValue: col - invalid parameter.');
  assert((typeof val !== 'undefined'), 'Table:setValue: No value to set.');

  this.tableValues_[row - 1][col - 1] = val;
  this.tableRange_.getCell(row, col).setValue(val);
};

/**
 * @param {string} index
 * @return {number}
 */
Table.prototype.getColumn = function(col) {

  col = this.columnHeader ? this.columnHeader.getIndex(col) : col;
  assert(((col > 0) && (col <= this.numColumns_)), 'Table:getValue: col - invalid parameter.');

  return col;
};

/**
 * @param {string} index
 * @return {number}
 */
Table.prototype.getRow = function(row) {

  row = this.rowHeader ? this.rowHeader.getIndex(row) : row;
  assert(((row > 0) && (row <= this.numRows_)), 'Table:setValue: row - invalid parameter.');

  return row;
};

/**
 * @param {number} colIndex
 * @return {number}
 */
Table.prototype.getNumData = function(colIndex) {

  colIndex = this.columnHeader ? this.columnHeader.getIndex(colIndex) : colIndex;

  assert(((colIndex > 0) && (colIndex <= this.numColumns_)),
         'Table:getNumData: col - invalid parameter.');

  var c = colIndex - 1;

  var count = 0, r;
  for (r = 0; r < this.tableValues_.length; r++) {
    if (this.tableValues_[r][c] !== '') {
      count++;
    }
  }

  return count;
};


/**
 * @param {...(number|Array.<number>)} var_args Rows in sheet to create with.
 */
Table.prototype.createColumnHeader = function (var_args) {

  var args = Array.prototype.slice.call(arguments);

  this.columnHeader = new MultiLineHeader(this, 'row', args);
};


/**
 * @param {...(number|Array.<number>)} var_args Columns in sheet to create with.
 */
Table.prototype.createRowHeader = function (var_args) {

  var args = Array.prototype.slice.call(arguments);

  this.rowHeader = new MultiLineHeader(this, 'col', args);
};



module.exports = Table;
